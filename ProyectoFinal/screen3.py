# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'screen1.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets

import matplotlib.pyplot as plt
import datetime
import pandas as pd 


class Ui_analisis3(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(1057, 821)
        MainWindow.setMinimumSize(QtCore.QSize(1057, 821))
        MainWindow.setMaximumSize(QtCore.QSize(1057, 821))
        MainWindow.setStyleSheet("QWidget#centralwidget{\n"
"background-color: qlineargradient(spread:pad, x1:0, y1:0, x2:1, y2:0, stop:0 rgba(255, 170, 206, 255), stop:1 rgba(255, 255, 255, 255));\n"
"}")
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.label = QtWidgets.QLabel(self.centralwidget)
        self.label.setGeometry(QtCore.QRect(460, 20, 511, 71))
        self.label.setStyleSheet("color: rgb(255, 15, 159);\n"
"font: 75 28pt \"Comic Sans MS\";\n"
"")
        self.label.setObjectName("label")
        self.pushButton_3 = QtWidgets.QPushButton(self.centralwidget,clicked= lambda: self.plotOnCanvas())
        self.pushButton_3.setGeometry(QtCore.QRect(50, 50, 121, 31))
        self.pushButton_3.setStyleSheet("background-color: rgb(255, 255, 255);\n"
"color: rgb(150, 129, 255);\n"
"font: 60 12pt \"Rockwell\";\n"
"border-color: rgb(180, 126, 255);")
        self.pushButton_3.setObjectName("pushButton_3")
        self.label_2 = QtWidgets.QLabel(self.centralwidget)
        self.label_2.setGeometry(QtCore.QRect(180, 80, 741, 71))
        self.label_2.setStyleSheet("color:rgb(150, 129, 255);\n"
"font: 75 20pt \"Comic Sans MS\";\n"
"")
        self.label_2.setObjectName("label_2")
        self.graphicsView = QtWidgets.QGraphicsView(self.centralwidget)
        self.graphicsView.setGeometry(QtCore.QRect(70, 160, 931, 581))
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.NoBrush)
        self.graphicsView.setBackgroundBrush(brush)
        self.graphicsView.setObjectName("graphicsView")
        self.label_3 = QtWidgets.QLabel(self.centralwidget)
        self.label_3.setGeometry(QtCore.QRect(120, 180, 841, 71))
        self.label_3.setStyleSheet("color:rgb(0, 0, 0);\n"
"font: 75 20pt \"Comic Sans MS\";\n"
"")
        self.label_3.setObjectName("label_3")
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 1057, 22))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.label.setText(_translate("MainWindow", "Grafico lineal"))
        self.pushButton_3.setText(_translate("MainWindow", "Graficar"))
        self.label_2.setText(_translate("MainWindow", "¿Cuántas ofertas de trabajos remotos en desarrollo web existen en el último año? "))
        self.label_3.setText(_translate("MainWindow", ""))

    def plotOnCanvas(self):
        meses = ["Enero","Febrero","Marzo","Abril","Mayo","Junio","Julio","Agosto","Septiembre","Octubre","Noviembre","Diciembre"]
        tiempo = ["un", "dos", "tres", "cuatro","cinco","seis","siete","ocho","nueve","diez","once","año"]
        lst = [0] * 12
        df = pd.read_csv('analisis3.csv', delimiter=',')
        for i in range(0,len(df.index)):
                fecha = (datetime.date.today().month) -1 
                texto = str(df['tiempo'][i]).split(" ")
                # 17 dias atras
                dia = texto[1]
                # # hace un mes
                mes = texto[2]
                if  "dias"  == dia :
                        temporal = lst[fecha]
                        temporal = temporal + 1
                        lst[fecha] = temporal
                elif "mes" or "meses" == mes:
                        num = tiempo.index(dia) + 1
                        num = fecha - num
                        temporal = lst[num]
                        temporal = temporal + 1 
                        lst[num] = temporal 
        maximo = max(lst)
        mes = lst.index(maximo)  
        mes_final = meses[mes]              
                        
                        
        self.label_3.setText("En el mes con mas ofertas laborales fue: " )                 
                                
        fig, ax = plt.subplots( sharey = True) 
        plt.xlabel('Meses')
        plt.ylabel('Numero de ofertas laborales')
        plt.title("Ofertas de trabajos remotos en desarrollo web existen en el último año")
        ax.plot(meses, lst, color = 'tab:orange')
        manager = plt.get_current_fig_manager()
        manager.full_screen_toggle()
        plt.show()    

if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_analisis3()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
